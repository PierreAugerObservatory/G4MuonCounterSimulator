/**
* @file TScintHit.cc
* @class TScintHit
* @brief Define the scintillator hit structure for the output ROOT file
*
* A TScintHit class is created for a strip if the energy deposition is >0 for that strip
* A ROOT dictionary for this class is generated by the Makefile
* @author Dr. Simone Riggi
* @date 05/04/2010
*/

#include "TScintHit.hh"

TScintHit::TScintHit()
: StripId(-1),PlaneId(-1),SuperPlaneId(-1),Etot(0),Nphotons(0),Nphotons_scint(0),Nphotons_cerenk(0),Nphotons_wls(0),Nphotons_abs(0),Nphotons_absBoundary(0)
{

	PhotonTrackLength.clear();
	PhotonTrackLength.resize(0);

	PhotonTrackDistance.clear();
	PhotonTrackDistance.resize(0);

	PhotonEmissionAngle.clear();
	PhotonEmissionAngle.resize(0);

	PhotonEmissionTime.clear();
	PhotonEmissionTime.resize(0);

	PhotonEmissionWavelength.clear();
	PhotonEmissionWavelength.resize(0);

	PhotonProcessType.clear();
	PhotonProcessType.resize(0);
	
	Edep.clear();
	Edep.resize(0);

	Time.clear();
	Time.resize(0);

	TrackId.clear();
	TrackId.resize(0);

	ParticleType.clear();
	ParticleType.resize(0);

	Position.clear();
	Position.resize(0);

	TrackDirection.clear();
	TrackDirection.resize(0);

	StripPosition.SetXYZ(-1,-1,-1);

	PhotocathodeSurfacePosition.clear();
	PhotocathodeSurfacePosition.resize(0);

}//close constructor

TScintHit::~TScintHit(){


}//close destructor


void TScintHit::Append(TScintHit aNewHit){

	unsigned int nHitsForThisStrip= (aNewHit.Edep).size();
	unsigned int nPMTForThisStrip= (aNewHit.ExpPMTTime).size();

	for(unsigned int j=0;j<nHitsForThisStrip;j++){	
		double Edep= aNewHit.Edep[j];
		double Time= aNewHit.Time[j];			
		int TrackId= aNewHit.TrackId[j];
		int ParticleType= aNewHit.ParticleType[j];
		TVector3 Position= aNewHit.Position[j];
	
		
		//add to existing collection
		(this->Edep).push_back(Edep);
		(this->Time).push_back(Time);
		(this->TrackId).push_back(TrackId);
		(this->ParticleType).push_back(ParticleType);
		(this->Position).push_back(Position);

		
		TVector3 TrackDirection= aNewHit.TrackDirection[j];
		(this->TrackDirection).push_back(TrackDirection);

		/*
		if((aNewHit.TrackDirection).size()==nHitsForThisStrip){
			TVector3 TrackDirection= aNewHit.TrackDirection[j];
			(this->TrackDirection).push_back(TrackDirection);
		}
		*/
	
		(this->Etot)+= Edep;	

		for(unsigned int k=0;k<nPMTForThisStrip;k++) {
			double expPMTTime= aNewHit.ExpPMTTime[k][j];
			(this->ExpPMTTime[k]).push_back(expPMTTime);
		}

	}//end loop hits for this strip

	unsigned int nPhotonsForThisStrip= (aNewHit.PhotonTrackLength).size();
	for(unsigned int j=0;j<nPhotonsForThisStrip;j++){
		double PhotonTrackLength= aNewHit.PhotonTrackLength[j];
		double PhotonTrackDistance= aNewHit.PhotonTrackDistance[j];
		double PhotonEmissionAngle= aNewHit.PhotonEmissionAngle[j];
		double PhotonEmissionTime= aNewHit.PhotonEmissionTime[j];
		double PhotonEmissionWavelength= aNewHit.PhotonEmissionWavelength[j];
		int PhotonProcessType= aNewHit.PhotonProcessType[j];

		//add to existing collection
		(this->PhotonTrackLength).push_back(PhotonTrackLength);
		(this->PhotonTrackDistance).push_back(PhotonTrackDistance);	
		(this->PhotonEmissionAngle).push_back(PhotonEmissionAngle);
		(this->PhotonEmissionTime).push_back(PhotonEmissionTime);
		(this->PhotonEmissionWavelength).push_back(PhotonEmissionWavelength);
		(this->PhotonProcessType).push_back(PhotonProcessType);
	}//end loop photons for this strip


}//close TScintHit::Append()
 

ClassImp(TScintHit)

#ifdef __MAKECINT__
#pragma link C++ class TScintHit+; 
#endif

#ifdef __MAKECINT__
#pragma link C++ class std::vector<TScintHit*>+;
#endif

#ifdef __MAKECINT__
#pragma link C++ class std::vector<TScintHit>+;
#endif

