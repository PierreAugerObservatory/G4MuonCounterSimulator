/**
* @file Track.hh
* @class Track
* @brief Define a track in the detector
*
* A Track class is created for a couple of detector plane X-Y if the Edep, Npe or Nph is above threshold for the X & Y strips 
* A ROOT dictionary for this class is generated by the Makefile
* @author Dr. Simone Riggi
* @date 07/09/2010
*/


#ifndef Track_h
#define Track_h 1

#include "TrackPoint.hh"

#include <Rtypes.h>
#include <TObject.h>
#include <TVector3.h>
#include <TGeoTrack.h>
#include <TVirtualGeoTrack.h>

#include <iostream>
#include <vector>


//class Track : public TObject {
class Track : public TGeoTrack {

	public:
		/** 
		\brief Class constructor: initialize structures.
 		*/   
  	Track();
		/** 
		\brief Class destructor: free allocated memory.
 		*/
  	//virtual ~Track();
		~Track();


	public:

		void AddPointDetId(int detId){fPointsDetId.push_back(detId);}
		std::vector<int> GetPointDetId(){return fPointsDetId;}
		void SetPointDetId(std::vector<int> vect){fPointsDetId= vect;}
	
		void AddPointError(double xErr, double yErr, double zErr, double tErr);
		int GetPointError(int i, double &xErr, double &yErr, double &zErr, double &tErr) const;

		void AddTrackPoint(TrackPoint aPoint);
		int GetTrackPoint(int i, TrackPoint &aPoint) const;

		
		int GetFitStatus(){return fFitStatus;}
		void SetFitStatus(int value){fFitStatus= value;}
		double GetFitChi2(){return fFitChi2;}
		void SetFitChi2(double value){fFitChi2= value;}

		TVector3 GetVertexPos(){return fVertexPos;}
		void SetVertexPos(TVector3 value){fVertexPos= value;}
		TVector3 GetDirection(){return fDirection;}
		void SetDirection(TVector3 value){fDirection= value;}
		double GetTheta(){return fTheta;}
		void SetTheta(double value){fTheta= value;}
		double GetPhi(){return fPhi;}
		void SetPhi(double value){fPhi= value;}
		double GetTx(){return fTx;}
		void SetTx(double value){fTx= value;}
		double GetTy(){return fTy;}
		void SetTy(double value){fTy= value;}

		std::vector<double> GetTrackHitChi2List(){return fTrackHitChi2;}
		void SetTrackHitChi2(std::vector<double> value){fTrackHitChi2= value;}
		void AddTrackHitChi2(double value){ fTrackHitChi2.push_back(value); }
		int GetTrackHitChi2(int i, double &chi2) const;
			
		std::vector<double> GetTrackHitExpChi2List(){return fTrackHitExpChi2;}
		void SetTrackHitExpChi2(std::vector<double> value){fTrackHitExpChi2= value;}
		void AddTrackHitExpChi2(double value){ fTrackHitExpChi2.push_back(value); }
		int GetTrackHitExpChi2(int i, double &chi2) const;

		double GetThetaStart(){return fThetaStart;}
		void SetThetaStart(double value){fThetaStart= value;}
		double GetPhiStart(){return fPhiStart;}
		void SetPhiStart(double value){fPhiStart= value;}
		double GetTxStart(){return fTxStart;}
		void SetTxStart(double value){fTxStart= value;}
		double GetTyStart(){return fTyStart;}
		void SetTyStart(double value){fTyStart= value;}
		TVector3 GetVertexPosStart(){return fVertexPosStart;}
		void SetVertexPosStart(TVector3 value){fVertexPosStart= value;}


		TVector3 GetVertexPosErr(){return fVertexPosErr;}
		void SetVertexPosErr(TVector3 value){fVertexPosErr= value;}
		double GetThetaErr(){return fThetaErr;}
		void SetThetaErr(double value){fThetaErr= value;}
		double GetPhiErr(){return fPhiErr;}
		void SetPhiErr(double value){fPhiErr= value;}
		double GetTxErr(){return fTxErr;}
		void SetTxErr(double value){fTxErr= value;}
		double GetTyErr(){return fTyErr;}
		void SetTyErr(double value){fTyErr= value;}

		double GetThetaStartErr(){return fThetaStartErr;}
		void SetThetaStartErr(double value){fThetaStartErr= value;}
		double GetPhiStartErr(){return fPhiStartErr;}
		void SetPhiStartErr(double value){fPhiStartErr= value;}
		double GetTxStartErr(){return fTxStartErr;}
		void SetTxStartErr(double value){fTxStartErr= value;}
		double GetTyStartErr(){return fTyStartErr;}
		void SetTyStartErr(double value){fTyStartErr= value;}
		TVector3 GetVertexPosStartErr(){return fVertexPosStartErr;}
		void SetVertexPosStartErr(TVector3 value){fVertexPosStartErr= value;}

	private:
		
		int	fNpoints;//number of stored points
		double*	fPoints;//[fNpoints] array of points (x,y,z,t) belonging to this track	
		int	fPointsSize;//capacity of points array
		
		int	fNpointsErr;//number of stored points for errors
		int	fPointsErrSize;//capacity of points array
		double*	fPointsErr;//[fNpoints] array of points (x,y,z,t) belonging to this track

		std::vector<TrackPoint>	fTrackPointCollection;

    std::vector<int> fPointsDetId;
		TVector3 fVertexPos;
		TVector3 fDirection;
		double fTheta;
		double fPhi;
		double fTx;
		double fTy;
		int fFitStatus;
  	double fFitChi2;
		std::vector<double> fTrackHitChi2;
		std::vector<double> fTrackHitExpChi2;
		
		TVector3 fVertexPosStart;
		double fThetaStart;
		double fPhiStart;
		double fTxStart;
		double fTyStart;
		
		TVector3 fVertexPosErr;
		double fThetaErr;
		double fPhiErr;
		double fTxErr;
		double fTyErr;
		TVector3 fVertexPosStartErr;
		double fThetaStartErr;
		double fPhiStartErr;
		double fTxStartErr;
		double fTyStartErr;

  	ClassDef(Track,1)
};



#ifdef __MAKECINT__
#pragma link C++ class Track+; 
#endif

#ifdef __MAKECINT__
#pragma link C++ class std::vector<Track*>+;
#endif

#ifdef __MAKECINT__
#pragma link C++ class std::vector<Track>+;
#endif


#endif
